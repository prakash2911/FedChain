"""
This module contains Ethereum Testing platform for Federated Learning.
"""
from web3 import Web3
from solcx import compile_source
from dataclasses import dataclass
import json

@dataclass
class ContractInfo:
    """
    Represents contract information for clients.
    """
    contract_id: str
    # Application binary interface
    abi: list
    address: str


def compileContract(w3, filename, *vargs):

    abi =json.loads('[{"inputs":[{"internalType":"bytes","name":"initialModel","type":"bytes"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"size","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"LocalMeans","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"size","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"LocalStds","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"size","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"model","type":"bytes"}],"name":"LocalUpdate","type":"event"},{"inputs":[],"name":"dataSize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"epoch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDataSize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getEpoch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMeans","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getModel","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStds","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"globalMeans","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"globalStds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"updatedModel","type":"bytes"}],"name":"globalUpdate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"size","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"localMeans","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"size","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"localStds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"localEpoch","type":"uint256"},{"internalType":"uint256","name":"size","type":"uint256"},{"internalType":"bytes","name":"localModel","type":"bytes"}],"name":"localUpdate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"means","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"model","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stage","outputs":[{"internalType":"enum FederatedLearningContract.Stage","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stds","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}]')
    bytecode='608060405234801562000010575f80fd5b5060405162001dfb38038062001dfb83398181016040528101906200003691906200024d565b335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060039081620000869190620004d3565b505f6001819055505f6002819055505f8060146101000a81548160ff02191690836002811115620000bc57620000bb620005b7565b5b021790555050620005e4565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6200012982620000e1565b810181811067ffffffffffffffff821117156200014b576200014a620000f1565b5b80604052505050565b5f6200015f620000c8565b90506200016d82826200011e565b919050565b5f67ffffffffffffffff8211156200018f576200018e620000f1565b5b6200019a82620000e1565b9050602081019050919050565b5f5b83811015620001c6578082015181840152602081019050620001a9565b5f8484015250505050565b5f620001e7620001e18462000172565b62000154565b905082815260208101848484011115620002065762000205620000dd565b5b62000213848285620001a7565b509392505050565b5f82601f830112620002325762000231620000d9565b5b815162000244848260208601620001d1565b91505092915050565b5f60208284031215620002655762000264620000d1565b5b5f82015167ffffffffffffffff811115620002855762000284620000d5565b5b62000293848285016200021b565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680620002eb57607f821691505b602082108103620003015762000300620002a6565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620003657fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000328565b62000371868362000328565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620003bb620003b5620003af8462000389565b62000392565b62000389565b9050919050565b5f819050919050565b620003d6836200039b565b620003ee620003e582620003c2565b84845462000334565b825550505050565b5f90565b62000404620003f6565b62000411818484620003cb565b505050565b5b8181101562000438576200042c5f82620003fa565b60018101905062000417565b5050565b601f8211156200048757620004518162000307565b6200045c8462000319565b810160208510156200046c578190505b620004846200047b8562000319565b83018262000416565b50505b505050565b5f82821c905092915050565b5f620004a95f19846008026200048c565b1980831691505092915050565b5f620004c3838362000498565b9150826002028217905092915050565b620004de826200029c565b67ffffffffffffffff811115620004fa57620004f9620000f1565b5b620005068254620002d3565b620005138282856200043c565b5f60209050601f83116001811462000549575f841562000534578287015190505b620005408582620004b6565b865550620005af565b601f198416620005598662000307565b5f5b8281101562000582578489015182556001820191506020850194506020810190506200055b565b86831015620005a257848901516200059e601f89168262000498565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b61180980620005f25f395ff3fe608060405234801561000f575f80fd5b5060043610610114575f3560e01c8063900cf0cf116100a0578063a0bfa1e01161006f578063a0bfa1e014610292578063a5e9a5dc146102b0578063c040e6b8146102ce578063ca58e7d7146102ec578063f20648581461030a57610114565b8063900cf0cf14610220578063948f65ae1461023e578063968764ce1461025a5780639e7bcee01461027657610114565b806370a8beb1116100e757806370a8beb11461018c57806373f5fd98146101aa578063757991a8146101c65780637d036b27146101e45780638da5cb5b1461020257610114565b80630ad9d0521461011857806312c212291461013657806349ce468d146101525780635a5020d214610170575b5f80fd5b610120610328565b60405161012d9190610dc1565b60405180910390f35b610150600480360381019061014b9190610f1e565b6103b4565b005b61015a6104e7565b6040516101679190610f7d565b60405180910390f35b61018a60048036038101906101859190610f1e565b6104ed565b005b61019461062c565b6040516101a19190610dc1565b60405180910390f35b6101c460048036038101906101bf9190610f1e565b6106b8565b005b6101ce6107f6565b6040516101db9190610f7d565b60405180910390f35b6101ec6107ff565b6040516101f99190610f7d565b60405180910390f35b61020a610808565b6040516102179190610fd5565b60405180910390f35b61022861082b565b6040516102359190610f7d565b60405180910390f35b61025860048036038101906102539190611018565b610831565b005b610274600480360381019061026f9190611018565b6108fa565b005b610290600480360381019061028b9190611072565b6109c2565b005b61029a610ae9565b6040516102a79190610dc1565b60405180910390f35b6102b8610b79565b6040516102c59190610dc1565b60405180910390f35b6102d6610c09565b6040516102e39190611151565b60405180910390f35b6102f4610c1b565b6040516103019190610dc1565b60405180910390f35b610312610ca7565b60405161031f9190610dc1565b60405180910390f35b6003805461033590611197565b80601f016020809104026020016040519081016040528092919081815260200182805461036190611197565b80156103ac5780601f10610383576101008083540402835291602001916103ac565b820191905f5260205f20905b81548152906001019060200180831161038f57829003601f168201915b505050505081565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043890611247565b60405180910390fd5b600280811115610454576104536110de565b5b5f60149054906101000a900460ff166002811115610475576104746110de565b5b146104b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ac906112d5565b60405180910390fd5b80600390816104c49190611490565b506001805f8282546104d6919061158c565b925050819055505f60028190555050565b60025481565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461057a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057190611247565b60405180910390fd5b6001600281111561058e5761058d6110de565b5b5f60149054906101000a900460ff1660028111156105af576105ae6110de565b5b146105ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e69061162f565b60405180910390fd5b80600590816105fe9190611490565b5060025f60146101000a81548160ff02191690836002811115610624576106236110de565b5b021790555050565b6004805461063990611197565b80601f016020809104026020016040519081016040528092919081815260200182805461066590611197565b80156106b05780601f10610687576101008083540402835291602001916106b0565b820191905f5260205f20905b81548152906001019060200180831161069357829003601f168201915b505050505081565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073c90611247565b60405180910390fd5b5f6002811115610758576107576110de565b5b5f60149054906101000a900460ff166002811115610779576107786110de565b5b146107b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b0906116bd565b60405180910390fd5b80600490816107c89190611490565b5060015f60146101000a81548160ff021916908360028111156107ee576107ed6110de565b5b021790555050565b5f600154905090565b5f600254905090565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60016002811115610845576108446110de565b5b5f60149054906101000a900460ff166002811115610866576108656110de565b5b146108a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089d9061162f565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fdfa7623c58557e601807478feb949d69cac3f24b63ba69a4968d3c2d01e012ce83836040516108ee9291906116db565b60405180910390a25050565b5f600281111561090d5761090c6110de565b5b5f60149054906101000a900460ff16600281111561092e5761092d6110de565b5b1461096e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610965906116bd565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f929e8507fdaad09776b988aec4c3f84c1a2f806dd14de7630bb850a55d38bb5c83836040516109b69291906116db565b60405180910390a25050565b6002808111156109d5576109d46110de565b5b5f60149054906101000a900460ff1660028111156109f6576109f56110de565b5b14610a36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2d906112d5565b60405180910390fd5b6001548314610a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7190611779565b60405180910390fd5b8160025f828254610a8b919061158c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f98d6958c2443d5d76f39ce5c5010cb162fd20c9fea2e07425c77d7bc2e6cf195848484604051610adc93929190611797565b60405180910390a2505050565b606060038054610af890611197565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2490611197565b8015610b6f5780601f10610b4657610100808354040283529160200191610b6f565b820191905f5260205f20905b815481529060010190602001808311610b5257829003601f168201915b5050505050905090565b606060058054610b8890611197565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb490611197565b8015610bff5780601f10610bd657610100808354040283529160200191610bff565b820191905f5260205f20905b815481529060010190602001808311610be257829003601f168201915b5050505050905090565b5f60149054906101000a900460ff1681565b60058054610c2890611197565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5490611197565b8015610c9f5780601f10610c7657610100808354040283529160200191610c9f565b820191905f5260205f20905b815481529060010190602001808311610c8257829003601f168201915b505050505081565b606060048054610cb690611197565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce290611197565b8015610d2d5780601f10610d0457610100808354040283529160200191610d2d565b820191905f5260205f20905b815481529060010190602001808311610d1057829003601f168201915b5050505050905090565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610d6e578082015181840152602081019050610d53565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610d9382610d37565b610d9d8185610d41565b9350610dad818560208601610d51565b610db681610d79565b840191505092915050565b5f6020820190508181035f830152610dd98184610d89565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610e3082610d79565b810181811067ffffffffffffffff82111715610e4f57610e4e610dfa565b5b80604052505050565b5f610e61610de1565b9050610e6d8282610e27565b919050565b5f67ffffffffffffffff821115610e8c57610e8b610dfa565b5b610e9582610d79565b9050602081019050919050565b828183375f83830152505050565b5f610ec2610ebd84610e72565b610e58565b905082815260208101848484011115610ede57610edd610df6565b5b610ee9848285610ea2565b509392505050565b5f82601f830112610f0557610f04610df2565b5b8135610f15848260208601610eb0565b91505092915050565b5f60208284031215610f3357610f32610dea565b5b5f82013567ffffffffffffffff811115610f5057610f4f610dee565b5b610f5c84828501610ef1565b91505092915050565b5f819050919050565b610f7781610f65565b82525050565b5f602082019050610f905f830184610f6e565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610fbf82610f96565b9050919050565b610fcf81610fb5565b82525050565b5f602082019050610fe85f830184610fc6565b92915050565b610ff781610f65565b8114611001575f80fd5b50565b5f8135905061101281610fee565b92915050565b5f806040838503121561102e5761102d610dea565b5b5f61103b85828601611004565b925050602083013567ffffffffffffffff81111561105c5761105b610dee565b5b61106885828601610ef1565b9150509250929050565b5f805f6060848603121561108957611088610dea565b5b5f61109686828701611004565b93505060206110a786828701611004565b925050604084013567ffffffffffffffff8111156110c8576110c7610dee565b5b6110d486828701610ef1565b9150509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6003811061111c5761111b6110de565b5b50565b5f81905061112c8261110b565b919050565b5f61113b8261111f565b9050919050565b61114b81611131565b82525050565b5f6020820190506111645f830184611142565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806111ae57607f821691505b6020821081036111c1576111c061116a565b5b50919050565b5f82825260208201905092915050565b7f4f6e6c792074686520636f6e7472616374206f776e65722063616e2063616c6c5f8201527f20746869732066756e6374696f6e210000000000000000000000000000000000602082015250565b5f611231602f836111c7565b915061123c826111d7565b604082019050919050565b5f6020820190508181035f83015261125e81611225565b9050919050565b7f43616e206f6e6c792062652063616c6c656420696e20747261696e696e6720735f8201527f7461676521000000000000000000000000000000000000000000000000000000602082015250565b5f6112bf6025836111c7565b91506112ca82611265565b604082019050919050565b5f6020820190508181035f8301526112ec816112b3565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261134f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611314565b6113598683611314565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61139461138f61138a84610f65565b611371565b610f65565b9050919050565b5f819050919050565b6113ad8361137a565b6113c16113b98261139b565b848454611320565b825550505050565b5f90565b6113d56113c9565b6113e08184846113a4565b505050565b5b81811015611403576113f85f826113cd565b6001810190506113e6565b5050565b601f82111561144857611419816112f3565b61142284611305565b81016020851015611431578190505b61144561143d85611305565b8301826113e5565b50505b505050565b5f82821c905092915050565b5f6114685f198460080261144d565b1980831691505092915050565b5f6114808383611459565b9150826002028217905092915050565b61149982610d37565b67ffffffffffffffff8111156114b2576114b1610dfa565b5b6114bc8254611197565b6114c7828285611407565b5f60209050601f8311600181146114f8575f84156114e6578287015190505b6114f08582611475565b865550611557565b601f198416611506866112f3565b5f5b8281101561152d57848901518255600182019150602085019450602081019050611508565b8683101561154a5784890151611546601f891682611459565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61159682610f65565b91506115a183610f65565b92508282019050808211156115b9576115b861155f565b5b92915050565b7f43616e206f6e6c792062652063616c6c656420696e207374642070726570726f5f8201527f63657373696e6720737461676521000000000000000000000000000000000000602082015250565b5f611619602e836111c7565b9150611624826115bf565b604082019050919050565b5f6020820190508181035f8301526116468161160d565b9050919050565b7f43616e206f6e6c792062652063616c6c656420696e206d65616e7320707265705f8201527f726f63657373696e672073746167652100000000000000000000000000000000602082015250565b5f6116a76030836111c7565b91506116b28261164d565b604082019050919050565b5f6020820190508181035f8301526116d48161169b565b9050919050565b5f6040820190506116ee5f830185610f6e565b81810360208301526117008184610d89565b90509392505050565b7f4c6f63616c207570646174652065706f6368206973206e6f74207468652073615f8201527f6d6520617320676c6f62616c2065706f63682100000000000000000000000000602082015250565b5f6117636033836111c7565b915061176e82611709565b604082019050919050565b5f6020820190508181035f83015261179081611757565b9050919050565b5f6060820190506117aa5f830186610f6e565b6117b76020830185610f6e565b81810360408301526117c98184610d89565b905094935050505056fea2646970667358221220d0f75cf5e7f3bf80a40e724f509a09f4757c35a216f637c55f135e6180a32d6e64736f6c63430008180033'

    contract = w3.eth.contract(abi=abi, bytecode=bytecode)
    contract_id = "FL"
    # Submit the transaction that deploys the contract
    tx_hash = contract.constructor(*vargs).transact({'from': w3.eth.default_account, 'gas': 4000000,'chainId':1337})
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    print(tx_hash)
    address = tx_receipt.contractAddress
    return ContractInfo(contract_id, abi, address)
   
	# Wait for the transaction to be mined, and get the transaction receipt
   


def useAccount(func):
    """
    A decorator for functions that need to use the account set in self.account
    """
    def f(self, *vargs, **kwargs):
        EthPlatform.w3.eth.default_account = self.account
        return func(self, *vargs, **kwargs)
    return f

class EthPlatform:
    contractFilename = "FL.sol"
    contractInfo = None
    w3 = None

    @staticmethod
    def initAccounts(amount: int):
        EthPlatform.w3 = Web3(Web3.HTTPProvider("http://127.0.0.1:7545"))

        amount = min(amount, len(EthPlatform.w3.eth.accounts))
        users = []
        for i, account in zip(range(amount), EthPlatform.w3.eth.accounts):
            users.append(EthPlatform.Account(account))
        return users

    class Account:
        """
        Wraps accounts with helper functions and some additional data.
        """
        def __init__(self, account):
            self.account = account

        @useAccount
        def deploy(self, *vargs):
            """
            Deploys the contract with this account and obtain a reference to it.
            """
            EthPlatform.contractInfo = compileContract(
                    EthPlatform.w3, EthPlatform.contractFilename, *vargs)
            self.obtainContract()

        def obtainContract(self):
            """
            After the contract has been deployed by one user, the other users will call
            this function to obtain a reference to it in self.contract.
            """
            self.contract = EthPlatform.w3.eth.contract(
                    address=EthPlatform.contractInfo.address,
                    abi=EthPlatform.contractInfo.abi)

        @useAccount
        def getUpdateEvents(self, receipts):
            """
            From a list of receipts get the processed update events.
            """
            events = []
            seenAddresses = set()
            epoch = self.getEpoch()
            for tx_receipt in receipts:
                logs = self.contract.events.LocalUpdate().process_receipt(tx_receipt)
                assert(len(logs) == 1)
                args = logs[0]["args"]
                address = args["from"]
                if address in seenAddresses:
                    log.warning(f"Ignoring repeated update from address {address}")
                    continue
                seenAddresses.add(address)
                updateEpoch = epoch
                if epoch != updateEpoch:
                    log.warning(f"Ignoring update with incorrect epoch {updateEpoch} from {address}")
                    continue
                size = args["size"]
                modelBytes = args["model"]
                events.append((size, modelBytes))
            return events

        @useAccount
        def getMeanEvents(self, receipts):
            """
            From a list of receipts get the processed mean events.
            """
            events = []
            seenAddresses = set()
            for tx_receipt in receipts:
                logs = self.contract.events.LocalMeans().process_receipt(tx_receipt)
                assert(len(logs) == 1)
                args = logs[0]["args"]
                address = args["from"]
                if address in seenAddresses:
                    log.warning(f"Ignoring repeated mean report from address {address}")
                    continue
                seenAddresses.add(address)
                size = args["size"]
                means = args["data"]
                events.append((size, means))
            return events

        @useAccount
        def getStdEvents(self, receipts):
            """
            From a list of receipts get the processed std events.
            """
            events = []
            seenAddresses = set()
            for tx_receipt in receipts:
                logs = self.contract.events.LocalStds().process_receipt(tx_receipt)
                assert(len(logs) == 1)
                args = logs[0]["args"]
                address = args["from"]
                if address in seenAddresses:
                    log.warning(f"Ignoring repeated mean report from address {address}")
                    continue
                seenAddresses.add(address)
                size = args["size"]
                means = args["data"]
                events.append((size, means))
            return events

        @useAccount
        def globalUpdate(self, modelBytes):
            """
            Update the global model after weight averaging.
            Should be called by owner only.
            """
            tx_hash = self.contract.functions.globalUpdate(modelBytes).transact()
            tx_receipt = EthPlatform.w3.eth.wait_for_transaction_receipt(tx_hash)
            return tx_receipt

        @useAccount
        def localUpdate(self, *vargs):
            """
            Trigger a local update event.
            """
            tx_hash = self.contract.functions.localUpdate(*vargs).transact()
            tx_receipt = EthPlatform.w3.eth.wait_for_transaction_receipt(tx_hash)
            return tx_receipt

        @useAccount
        def globalMeans(self, meanBytes):
            """
            Update the global means after mean averaging.
            Should be called by owner only.
            """
            tx_hash = self.contract.functions.globalMeans(meanBytes).transact()
            tx_receipt = EthPlatform.w3.eth.wait_for_transaction_receipt(tx_hash)
            return tx_receipt

        @useAccount
        def localMeans(self, *vargs):
            """
            Trigger a local means event.
            """
            tx_hash = self.contract.functions.localMeans(*vargs).transact()
            tx_receipt = EthPlatform.w3.eth.wait_for_transaction_receipt(tx_hash)
            return tx_receipt

        @useAccount
        def globalStds(self, stdBytes):
            """
            Update the global stds after std averaging.
            Should be called by owner only.
            """
            tx_hash = self.contract.functions.globalStds(stdBytes).transact()
            tx_receipt = EthPlatform.w3.eth.wait_for_transaction_receipt(tx_hash)
            return tx_receipt

        @useAccount
        def localStds(self, *vargs):
            """
            Trigger a local stds event.
            """
            tx_hash = self.contract.functions.localStds(*vargs).transact()
            tx_receipt = EthPlatform.w3.eth.wait_for_transaction_receipt(tx_hash)
            return tx_receipt

        # The following public accessor functions don't need to use account
        def getModel(self):
            return self.contract.functions.getModel().call()

        def getEpoch(self):
            return self.contract.functions.getEpoch().call()

        def getDataSize(self):
            return self.contract.functions.getDataSize().call()

        def getMeans(self):
            return self.contract.functions.getMeans().call()

        def getStds(self):
            return self.contract.functions.getStds().call()
